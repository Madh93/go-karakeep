// Package karakeep provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package karakeep

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// PutAdminUsersUserIdWithBody request with any body
	PutAdminUsersUserIdWithBody(ctx context.Context, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutAdminUsersUserId(ctx context.Context, userId string, body PutAdminUsersUserIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAssetsWithBody request with any body
	PostAssetsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAssetsAssetId request
	GetAssetsAssetId(ctx context.Context, assetId AssetId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetBookmarks request
	GetBookmarks(ctx context.Context, params *GetBookmarksParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostBookmarksWithBody request with any body
	PostBookmarksWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostBookmarks(ctx context.Context, body PostBookmarksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetBookmarksSearch request
	GetBookmarksSearch(ctx context.Context, params *GetBookmarksSearchParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteBookmarksBookmarkId request
	DeleteBookmarksBookmarkId(ctx context.Context, bookmarkId BookmarkId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetBookmarksBookmarkId request
	GetBookmarksBookmarkId(ctx context.Context, bookmarkId BookmarkId, params *GetBookmarksBookmarkIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchBookmarksBookmarkIdWithBody request with any body
	PatchBookmarksBookmarkIdWithBody(ctx context.Context, bookmarkId BookmarkId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchBookmarksBookmarkId(ctx context.Context, bookmarkId BookmarkId, body PatchBookmarksBookmarkIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostBookmarksBookmarkIdAssetsWithBody request with any body
	PostBookmarksBookmarkIdAssetsWithBody(ctx context.Context, bookmarkId BookmarkId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostBookmarksBookmarkIdAssets(ctx context.Context, bookmarkId BookmarkId, body PostBookmarksBookmarkIdAssetsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteBookmarksBookmarkIdAssetsAssetId request
	DeleteBookmarksBookmarkIdAssetsAssetId(ctx context.Context, bookmarkId BookmarkId, assetId AssetId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutBookmarksBookmarkIdAssetsAssetIdWithBody request with any body
	PutBookmarksBookmarkIdAssetsAssetIdWithBody(ctx context.Context, bookmarkId BookmarkId, assetId AssetId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutBookmarksBookmarkIdAssetsAssetId(ctx context.Context, bookmarkId BookmarkId, assetId AssetId, body PutBookmarksBookmarkIdAssetsAssetIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetBookmarksBookmarkIdHighlights request
	GetBookmarksBookmarkIdHighlights(ctx context.Context, bookmarkId BookmarkId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostBookmarksBookmarkIdSummarize request
	PostBookmarksBookmarkIdSummarize(ctx context.Context, bookmarkId BookmarkId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteBookmarksBookmarkIdTagsWithBody request with any body
	DeleteBookmarksBookmarkIdTagsWithBody(ctx context.Context, bookmarkId BookmarkId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteBookmarksBookmarkIdTags(ctx context.Context, bookmarkId BookmarkId, body DeleteBookmarksBookmarkIdTagsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostBookmarksBookmarkIdTagsWithBody request with any body
	PostBookmarksBookmarkIdTagsWithBody(ctx context.Context, bookmarkId BookmarkId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostBookmarksBookmarkIdTags(ctx context.Context, bookmarkId BookmarkId, body PostBookmarksBookmarkIdTagsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetHighlights request
	GetHighlights(ctx context.Context, params *GetHighlightsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostHighlightsWithBody request with any body
	PostHighlightsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostHighlights(ctx context.Context, body PostHighlightsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteHighlightsHighlightId request
	DeleteHighlightsHighlightId(ctx context.Context, highlightId HighlightId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetHighlightsHighlightId request
	GetHighlightsHighlightId(ctx context.Context, highlightId HighlightId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchHighlightsHighlightIdWithBody request with any body
	PatchHighlightsHighlightIdWithBody(ctx context.Context, highlightId HighlightId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchHighlightsHighlightId(ctx context.Context, highlightId HighlightId, body PatchHighlightsHighlightIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLists request
	GetLists(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostListsWithBody request with any body
	PostListsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostLists(ctx context.Context, body PostListsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteListsListId request
	DeleteListsListId(ctx context.Context, listId ListId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetListsListId request
	GetListsListId(ctx context.Context, listId ListId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchListsListIdWithBody request with any body
	PatchListsListIdWithBody(ctx context.Context, listId ListId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchListsListId(ctx context.Context, listId ListId, body PatchListsListIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetListsListIdBookmarks request
	GetListsListIdBookmarks(ctx context.Context, listId ListId, params *GetListsListIdBookmarksParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteListsListIdBookmarksBookmarkId request
	DeleteListsListIdBookmarksBookmarkId(ctx context.Context, listId ListId, bookmarkId BookmarkId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutListsListIdBookmarksBookmarkId request
	PutListsListIdBookmarksBookmarkId(ctx context.Context, listId ListId, bookmarkId BookmarkId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTags request
	GetTags(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostTagsWithBody request with any body
	PostTagsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostTags(ctx context.Context, body PostTagsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteTagsTagId request
	DeleteTagsTagId(ctx context.Context, tagId TagId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTagsTagId request
	GetTagsTagId(ctx context.Context, tagId TagId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchTagsTagIdWithBody request with any body
	PatchTagsTagIdWithBody(ctx context.Context, tagId TagId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchTagsTagId(ctx context.Context, tagId TagId, body PatchTagsTagIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTagsTagIdBookmarks request
	GetTagsTagIdBookmarks(ctx context.Context, tagId TagId, params *GetTagsTagIdBookmarksParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUsersMe request
	GetUsersMe(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUsersMeStats request
	GetUsersMeStats(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) PutAdminUsersUserIdWithBody(ctx context.Context, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAdminUsersUserIdRequestWithBody(c.Server, userId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAdminUsersUserId(ctx context.Context, userId string, body PutAdminUsersUserIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAdminUsersUserIdRequest(c.Server, userId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAssetsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAssetsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAssetsAssetId(ctx context.Context, assetId AssetId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAssetsAssetIdRequest(c.Server, assetId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetBookmarks(ctx context.Context, params *GetBookmarksParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBookmarksRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBookmarksWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBookmarksRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBookmarks(ctx context.Context, body PostBookmarksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBookmarksRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetBookmarksSearch(ctx context.Context, params *GetBookmarksSearchParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBookmarksSearchRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteBookmarksBookmarkId(ctx context.Context, bookmarkId BookmarkId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteBookmarksBookmarkIdRequest(c.Server, bookmarkId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetBookmarksBookmarkId(ctx context.Context, bookmarkId BookmarkId, params *GetBookmarksBookmarkIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBookmarksBookmarkIdRequest(c.Server, bookmarkId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchBookmarksBookmarkIdWithBody(ctx context.Context, bookmarkId BookmarkId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchBookmarksBookmarkIdRequestWithBody(c.Server, bookmarkId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchBookmarksBookmarkId(ctx context.Context, bookmarkId BookmarkId, body PatchBookmarksBookmarkIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchBookmarksBookmarkIdRequest(c.Server, bookmarkId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBookmarksBookmarkIdAssetsWithBody(ctx context.Context, bookmarkId BookmarkId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBookmarksBookmarkIdAssetsRequestWithBody(c.Server, bookmarkId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBookmarksBookmarkIdAssets(ctx context.Context, bookmarkId BookmarkId, body PostBookmarksBookmarkIdAssetsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBookmarksBookmarkIdAssetsRequest(c.Server, bookmarkId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteBookmarksBookmarkIdAssetsAssetId(ctx context.Context, bookmarkId BookmarkId, assetId AssetId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteBookmarksBookmarkIdAssetsAssetIdRequest(c.Server, bookmarkId, assetId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutBookmarksBookmarkIdAssetsAssetIdWithBody(ctx context.Context, bookmarkId BookmarkId, assetId AssetId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutBookmarksBookmarkIdAssetsAssetIdRequestWithBody(c.Server, bookmarkId, assetId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutBookmarksBookmarkIdAssetsAssetId(ctx context.Context, bookmarkId BookmarkId, assetId AssetId, body PutBookmarksBookmarkIdAssetsAssetIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutBookmarksBookmarkIdAssetsAssetIdRequest(c.Server, bookmarkId, assetId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetBookmarksBookmarkIdHighlights(ctx context.Context, bookmarkId BookmarkId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBookmarksBookmarkIdHighlightsRequest(c.Server, bookmarkId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBookmarksBookmarkIdSummarize(ctx context.Context, bookmarkId BookmarkId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBookmarksBookmarkIdSummarizeRequest(c.Server, bookmarkId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteBookmarksBookmarkIdTagsWithBody(ctx context.Context, bookmarkId BookmarkId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteBookmarksBookmarkIdTagsRequestWithBody(c.Server, bookmarkId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteBookmarksBookmarkIdTags(ctx context.Context, bookmarkId BookmarkId, body DeleteBookmarksBookmarkIdTagsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteBookmarksBookmarkIdTagsRequest(c.Server, bookmarkId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBookmarksBookmarkIdTagsWithBody(ctx context.Context, bookmarkId BookmarkId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBookmarksBookmarkIdTagsRequestWithBody(c.Server, bookmarkId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBookmarksBookmarkIdTags(ctx context.Context, bookmarkId BookmarkId, body PostBookmarksBookmarkIdTagsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBookmarksBookmarkIdTagsRequest(c.Server, bookmarkId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetHighlights(ctx context.Context, params *GetHighlightsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHighlightsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostHighlightsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostHighlightsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostHighlights(ctx context.Context, body PostHighlightsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostHighlightsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteHighlightsHighlightId(ctx context.Context, highlightId HighlightId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteHighlightsHighlightIdRequest(c.Server, highlightId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetHighlightsHighlightId(ctx context.Context, highlightId HighlightId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHighlightsHighlightIdRequest(c.Server, highlightId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchHighlightsHighlightIdWithBody(ctx context.Context, highlightId HighlightId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchHighlightsHighlightIdRequestWithBody(c.Server, highlightId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchHighlightsHighlightId(ctx context.Context, highlightId HighlightId, body PatchHighlightsHighlightIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchHighlightsHighlightIdRequest(c.Server, highlightId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLists(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetListsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostListsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostListsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostLists(ctx context.Context, body PostListsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostListsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteListsListId(ctx context.Context, listId ListId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteListsListIdRequest(c.Server, listId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetListsListId(ctx context.Context, listId ListId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetListsListIdRequest(c.Server, listId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchListsListIdWithBody(ctx context.Context, listId ListId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchListsListIdRequestWithBody(c.Server, listId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchListsListId(ctx context.Context, listId ListId, body PatchListsListIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchListsListIdRequest(c.Server, listId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetListsListIdBookmarks(ctx context.Context, listId ListId, params *GetListsListIdBookmarksParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetListsListIdBookmarksRequest(c.Server, listId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteListsListIdBookmarksBookmarkId(ctx context.Context, listId ListId, bookmarkId BookmarkId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteListsListIdBookmarksBookmarkIdRequest(c.Server, listId, bookmarkId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutListsListIdBookmarksBookmarkId(ctx context.Context, listId ListId, bookmarkId BookmarkId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutListsListIdBookmarksBookmarkIdRequest(c.Server, listId, bookmarkId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTags(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTagsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTagsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTagsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTags(ctx context.Context, body PostTagsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTagsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteTagsTagId(ctx context.Context, tagId TagId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteTagsTagIdRequest(c.Server, tagId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTagsTagId(ctx context.Context, tagId TagId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTagsTagIdRequest(c.Server, tagId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchTagsTagIdWithBody(ctx context.Context, tagId TagId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchTagsTagIdRequestWithBody(c.Server, tagId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchTagsTagId(ctx context.Context, tagId TagId, body PatchTagsTagIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchTagsTagIdRequest(c.Server, tagId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTagsTagIdBookmarks(ctx context.Context, tagId TagId, params *GetTagsTagIdBookmarksParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTagsTagIdBookmarksRequest(c.Server, tagId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUsersMe(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUsersMeRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUsersMeStats(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUsersMeStatsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewPutAdminUsersUserIdRequest calls the generic PutAdminUsersUserId builder with application/json body
func NewPutAdminUsersUserIdRequest(server string, userId string, body PutAdminUsersUserIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutAdminUsersUserIdRequestWithBody(server, userId, "application/json", bodyReader)
}

// NewPutAdminUsersUserIdRequestWithBody generates requests for PutAdminUsersUserId with any type of body
func NewPutAdminUsersUserIdRequestWithBody(server string, userId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostAssetsRequestWithBody generates requests for PostAssets with any type of body
func NewPostAssetsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/assets")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAssetsAssetIdRequest generates requests for GetAssetsAssetId
func NewGetAssetsAssetIdRequest(server string, assetId AssetId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "assetId", runtime.ParamLocationPath, assetId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/assets/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetBookmarksRequest generates requests for GetBookmarks
func NewGetBookmarksRequest(server string, params *GetBookmarksParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/bookmarks")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Archived != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "archived", runtime.ParamLocationQuery, *params.Archived); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Favourited != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "favourited", runtime.ParamLocationQuery, *params.Favourited); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortOrder != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortOrder", runtime.ParamLocationQuery, *params.SortOrder); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IncludeContent != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeContent", runtime.ParamLocationQuery, *params.IncludeContent); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostBookmarksRequest calls the generic PostBookmarks builder with application/json body
func NewPostBookmarksRequest(server string, body PostBookmarksJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostBookmarksRequestWithBody(server, "application/json", bodyReader)
}

// NewPostBookmarksRequestWithBody generates requests for PostBookmarks with any type of body
func NewPostBookmarksRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/bookmarks")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetBookmarksSearchRequest generates requests for GetBookmarksSearch
func NewGetBookmarksSearchRequest(server string, params *GetBookmarksSearchParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/bookmarks/search")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, params.Q); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.SortOrder != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortOrder", runtime.ParamLocationQuery, *params.SortOrder); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IncludeContent != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeContent", runtime.ParamLocationQuery, *params.IncludeContent); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteBookmarksBookmarkIdRequest generates requests for DeleteBookmarksBookmarkId
func NewDeleteBookmarksBookmarkIdRequest(server string, bookmarkId BookmarkId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "bookmarkId", runtime.ParamLocationPath, bookmarkId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/bookmarks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetBookmarksBookmarkIdRequest generates requests for GetBookmarksBookmarkId
func NewGetBookmarksBookmarkIdRequest(server string, bookmarkId BookmarkId, params *GetBookmarksBookmarkIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "bookmarkId", runtime.ParamLocationPath, bookmarkId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/bookmarks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.IncludeContent != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeContent", runtime.ParamLocationQuery, *params.IncludeContent); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchBookmarksBookmarkIdRequest calls the generic PatchBookmarksBookmarkId builder with application/json body
func NewPatchBookmarksBookmarkIdRequest(server string, bookmarkId BookmarkId, body PatchBookmarksBookmarkIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchBookmarksBookmarkIdRequestWithBody(server, bookmarkId, "application/json", bodyReader)
}

// NewPatchBookmarksBookmarkIdRequestWithBody generates requests for PatchBookmarksBookmarkId with any type of body
func NewPatchBookmarksBookmarkIdRequestWithBody(server string, bookmarkId BookmarkId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "bookmarkId", runtime.ParamLocationPath, bookmarkId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/bookmarks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostBookmarksBookmarkIdAssetsRequest calls the generic PostBookmarksBookmarkIdAssets builder with application/json body
func NewPostBookmarksBookmarkIdAssetsRequest(server string, bookmarkId BookmarkId, body PostBookmarksBookmarkIdAssetsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostBookmarksBookmarkIdAssetsRequestWithBody(server, bookmarkId, "application/json", bodyReader)
}

// NewPostBookmarksBookmarkIdAssetsRequestWithBody generates requests for PostBookmarksBookmarkIdAssets with any type of body
func NewPostBookmarksBookmarkIdAssetsRequestWithBody(server string, bookmarkId BookmarkId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "bookmarkId", runtime.ParamLocationPath, bookmarkId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/bookmarks/%s/assets", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteBookmarksBookmarkIdAssetsAssetIdRequest generates requests for DeleteBookmarksBookmarkIdAssetsAssetId
func NewDeleteBookmarksBookmarkIdAssetsAssetIdRequest(server string, bookmarkId BookmarkId, assetId AssetId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "bookmarkId", runtime.ParamLocationPath, bookmarkId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "assetId", runtime.ParamLocationPath, assetId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/bookmarks/%s/assets/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutBookmarksBookmarkIdAssetsAssetIdRequest calls the generic PutBookmarksBookmarkIdAssetsAssetId builder with application/json body
func NewPutBookmarksBookmarkIdAssetsAssetIdRequest(server string, bookmarkId BookmarkId, assetId AssetId, body PutBookmarksBookmarkIdAssetsAssetIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutBookmarksBookmarkIdAssetsAssetIdRequestWithBody(server, bookmarkId, assetId, "application/json", bodyReader)
}

// NewPutBookmarksBookmarkIdAssetsAssetIdRequestWithBody generates requests for PutBookmarksBookmarkIdAssetsAssetId with any type of body
func NewPutBookmarksBookmarkIdAssetsAssetIdRequestWithBody(server string, bookmarkId BookmarkId, assetId AssetId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "bookmarkId", runtime.ParamLocationPath, bookmarkId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "assetId", runtime.ParamLocationPath, assetId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/bookmarks/%s/assets/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetBookmarksBookmarkIdHighlightsRequest generates requests for GetBookmarksBookmarkIdHighlights
func NewGetBookmarksBookmarkIdHighlightsRequest(server string, bookmarkId BookmarkId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "bookmarkId", runtime.ParamLocationPath, bookmarkId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/bookmarks/%s/highlights", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostBookmarksBookmarkIdSummarizeRequest generates requests for PostBookmarksBookmarkIdSummarize
func NewPostBookmarksBookmarkIdSummarizeRequest(server string, bookmarkId BookmarkId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "bookmarkId", runtime.ParamLocationPath, bookmarkId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/bookmarks/%s/summarize", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteBookmarksBookmarkIdTagsRequest calls the generic DeleteBookmarksBookmarkIdTags builder with application/json body
func NewDeleteBookmarksBookmarkIdTagsRequest(server string, bookmarkId BookmarkId, body DeleteBookmarksBookmarkIdTagsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteBookmarksBookmarkIdTagsRequestWithBody(server, bookmarkId, "application/json", bodyReader)
}

// NewDeleteBookmarksBookmarkIdTagsRequestWithBody generates requests for DeleteBookmarksBookmarkIdTags with any type of body
func NewDeleteBookmarksBookmarkIdTagsRequestWithBody(server string, bookmarkId BookmarkId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "bookmarkId", runtime.ParamLocationPath, bookmarkId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/bookmarks/%s/tags", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostBookmarksBookmarkIdTagsRequest calls the generic PostBookmarksBookmarkIdTags builder with application/json body
func NewPostBookmarksBookmarkIdTagsRequest(server string, bookmarkId BookmarkId, body PostBookmarksBookmarkIdTagsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostBookmarksBookmarkIdTagsRequestWithBody(server, bookmarkId, "application/json", bodyReader)
}

// NewPostBookmarksBookmarkIdTagsRequestWithBody generates requests for PostBookmarksBookmarkIdTags with any type of body
func NewPostBookmarksBookmarkIdTagsRequestWithBody(server string, bookmarkId BookmarkId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "bookmarkId", runtime.ParamLocationPath, bookmarkId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/bookmarks/%s/tags", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetHighlightsRequest generates requests for GetHighlights
func NewGetHighlightsRequest(server string, params *GetHighlightsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/highlights")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostHighlightsRequest calls the generic PostHighlights builder with application/json body
func NewPostHighlightsRequest(server string, body PostHighlightsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostHighlightsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostHighlightsRequestWithBody generates requests for PostHighlights with any type of body
func NewPostHighlightsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/highlights")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteHighlightsHighlightIdRequest generates requests for DeleteHighlightsHighlightId
func NewDeleteHighlightsHighlightIdRequest(server string, highlightId HighlightId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "highlightId", runtime.ParamLocationPath, highlightId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/highlights/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetHighlightsHighlightIdRequest generates requests for GetHighlightsHighlightId
func NewGetHighlightsHighlightIdRequest(server string, highlightId HighlightId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "highlightId", runtime.ParamLocationPath, highlightId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/highlights/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchHighlightsHighlightIdRequest calls the generic PatchHighlightsHighlightId builder with application/json body
func NewPatchHighlightsHighlightIdRequest(server string, highlightId HighlightId, body PatchHighlightsHighlightIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchHighlightsHighlightIdRequestWithBody(server, highlightId, "application/json", bodyReader)
}

// NewPatchHighlightsHighlightIdRequestWithBody generates requests for PatchHighlightsHighlightId with any type of body
func NewPatchHighlightsHighlightIdRequestWithBody(server string, highlightId HighlightId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "highlightId", runtime.ParamLocationPath, highlightId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/highlights/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetListsRequest generates requests for GetLists
func NewGetListsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/lists")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostListsRequest calls the generic PostLists builder with application/json body
func NewPostListsRequest(server string, body PostListsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostListsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostListsRequestWithBody generates requests for PostLists with any type of body
func NewPostListsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/lists")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteListsListIdRequest generates requests for DeleteListsListId
func NewDeleteListsListIdRequest(server string, listId ListId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "listId", runtime.ParamLocationPath, listId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/lists/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetListsListIdRequest generates requests for GetListsListId
func NewGetListsListIdRequest(server string, listId ListId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "listId", runtime.ParamLocationPath, listId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/lists/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchListsListIdRequest calls the generic PatchListsListId builder with application/json body
func NewPatchListsListIdRequest(server string, listId ListId, body PatchListsListIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchListsListIdRequestWithBody(server, listId, "application/json", bodyReader)
}

// NewPatchListsListIdRequestWithBody generates requests for PatchListsListId with any type of body
func NewPatchListsListIdRequestWithBody(server string, listId ListId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "listId", runtime.ParamLocationPath, listId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/lists/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetListsListIdBookmarksRequest generates requests for GetListsListIdBookmarks
func NewGetListsListIdBookmarksRequest(server string, listId ListId, params *GetListsListIdBookmarksParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "listId", runtime.ParamLocationPath, listId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/lists/%s/bookmarks", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SortOrder != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortOrder", runtime.ParamLocationQuery, *params.SortOrder); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IncludeContent != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeContent", runtime.ParamLocationQuery, *params.IncludeContent); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteListsListIdBookmarksBookmarkIdRequest generates requests for DeleteListsListIdBookmarksBookmarkId
func NewDeleteListsListIdBookmarksBookmarkIdRequest(server string, listId ListId, bookmarkId BookmarkId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "listId", runtime.ParamLocationPath, listId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "bookmarkId", runtime.ParamLocationPath, bookmarkId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/lists/%s/bookmarks/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutListsListIdBookmarksBookmarkIdRequest generates requests for PutListsListIdBookmarksBookmarkId
func NewPutListsListIdBookmarksBookmarkIdRequest(server string, listId ListId, bookmarkId BookmarkId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "listId", runtime.ParamLocationPath, listId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "bookmarkId", runtime.ParamLocationPath, bookmarkId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/lists/%s/bookmarks/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTagsRequest generates requests for GetTags
func NewGetTagsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tags")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostTagsRequest calls the generic PostTags builder with application/json body
func NewPostTagsRequest(server string, body PostTagsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostTagsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostTagsRequestWithBody generates requests for PostTags with any type of body
func NewPostTagsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tags")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteTagsTagIdRequest generates requests for DeleteTagsTagId
func NewDeleteTagsTagIdRequest(server string, tagId TagId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "tagId", runtime.ParamLocationPath, tagId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tags/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTagsTagIdRequest generates requests for GetTagsTagId
func NewGetTagsTagIdRequest(server string, tagId TagId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "tagId", runtime.ParamLocationPath, tagId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tags/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchTagsTagIdRequest calls the generic PatchTagsTagId builder with application/json body
func NewPatchTagsTagIdRequest(server string, tagId TagId, body PatchTagsTagIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchTagsTagIdRequestWithBody(server, tagId, "application/json", bodyReader)
}

// NewPatchTagsTagIdRequestWithBody generates requests for PatchTagsTagId with any type of body
func NewPatchTagsTagIdRequestWithBody(server string, tagId TagId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "tagId", runtime.ParamLocationPath, tagId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tags/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetTagsTagIdBookmarksRequest generates requests for GetTagsTagIdBookmarks
func NewGetTagsTagIdBookmarksRequest(server string, tagId TagId, params *GetTagsTagIdBookmarksParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "tagId", runtime.ParamLocationPath, tagId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tags/%s/bookmarks", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SortOrder != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortOrder", runtime.ParamLocationQuery, *params.SortOrder); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IncludeContent != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeContent", runtime.ParamLocationQuery, *params.IncludeContent); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUsersMeRequest generates requests for GetUsersMe
func NewGetUsersMeRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/me")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUsersMeStatsRequest generates requests for GetUsersMeStats
func NewGetUsersMeStatsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/me/stats")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// PutAdminUsersUserIdWithBodyWithResponse request with any body
	PutAdminUsersUserIdWithBodyWithResponse(ctx context.Context, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAdminUsersUserIdResponse, error)

	PutAdminUsersUserIdWithResponse(ctx context.Context, userId string, body PutAdminUsersUserIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAdminUsersUserIdResponse, error)

	// PostAssetsWithBodyWithResponse request with any body
	PostAssetsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAssetsResponse, error)

	// GetAssetsAssetIdWithResponse request
	GetAssetsAssetIdWithResponse(ctx context.Context, assetId AssetId, reqEditors ...RequestEditorFn) (*GetAssetsAssetIdResponse, error)

	// GetBookmarksWithResponse request
	GetBookmarksWithResponse(ctx context.Context, params *GetBookmarksParams, reqEditors ...RequestEditorFn) (*GetBookmarksResponse, error)

	// PostBookmarksWithBodyWithResponse request with any body
	PostBookmarksWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBookmarksResponse, error)

	PostBookmarksWithResponse(ctx context.Context, body PostBookmarksJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBookmarksResponse, error)

	// GetBookmarksSearchWithResponse request
	GetBookmarksSearchWithResponse(ctx context.Context, params *GetBookmarksSearchParams, reqEditors ...RequestEditorFn) (*GetBookmarksSearchResponse, error)

	// DeleteBookmarksBookmarkIdWithResponse request
	DeleteBookmarksBookmarkIdWithResponse(ctx context.Context, bookmarkId BookmarkId, reqEditors ...RequestEditorFn) (*DeleteBookmarksBookmarkIdResponse, error)

	// GetBookmarksBookmarkIdWithResponse request
	GetBookmarksBookmarkIdWithResponse(ctx context.Context, bookmarkId BookmarkId, params *GetBookmarksBookmarkIdParams, reqEditors ...RequestEditorFn) (*GetBookmarksBookmarkIdResponse, error)

	// PatchBookmarksBookmarkIdWithBodyWithResponse request with any body
	PatchBookmarksBookmarkIdWithBodyWithResponse(ctx context.Context, bookmarkId BookmarkId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchBookmarksBookmarkIdResponse, error)

	PatchBookmarksBookmarkIdWithResponse(ctx context.Context, bookmarkId BookmarkId, body PatchBookmarksBookmarkIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchBookmarksBookmarkIdResponse, error)

	// PostBookmarksBookmarkIdAssetsWithBodyWithResponse request with any body
	PostBookmarksBookmarkIdAssetsWithBodyWithResponse(ctx context.Context, bookmarkId BookmarkId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBookmarksBookmarkIdAssetsResponse, error)

	PostBookmarksBookmarkIdAssetsWithResponse(ctx context.Context, bookmarkId BookmarkId, body PostBookmarksBookmarkIdAssetsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBookmarksBookmarkIdAssetsResponse, error)

	// DeleteBookmarksBookmarkIdAssetsAssetIdWithResponse request
	DeleteBookmarksBookmarkIdAssetsAssetIdWithResponse(ctx context.Context, bookmarkId BookmarkId, assetId AssetId, reqEditors ...RequestEditorFn) (*DeleteBookmarksBookmarkIdAssetsAssetIdResponse, error)

	// PutBookmarksBookmarkIdAssetsAssetIdWithBodyWithResponse request with any body
	PutBookmarksBookmarkIdAssetsAssetIdWithBodyWithResponse(ctx context.Context, bookmarkId BookmarkId, assetId AssetId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutBookmarksBookmarkIdAssetsAssetIdResponse, error)

	PutBookmarksBookmarkIdAssetsAssetIdWithResponse(ctx context.Context, bookmarkId BookmarkId, assetId AssetId, body PutBookmarksBookmarkIdAssetsAssetIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutBookmarksBookmarkIdAssetsAssetIdResponse, error)

	// GetBookmarksBookmarkIdHighlightsWithResponse request
	GetBookmarksBookmarkIdHighlightsWithResponse(ctx context.Context, bookmarkId BookmarkId, reqEditors ...RequestEditorFn) (*GetBookmarksBookmarkIdHighlightsResponse, error)

	// PostBookmarksBookmarkIdSummarizeWithResponse request
	PostBookmarksBookmarkIdSummarizeWithResponse(ctx context.Context, bookmarkId BookmarkId, reqEditors ...RequestEditorFn) (*PostBookmarksBookmarkIdSummarizeResponse, error)

	// DeleteBookmarksBookmarkIdTagsWithBodyWithResponse request with any body
	DeleteBookmarksBookmarkIdTagsWithBodyWithResponse(ctx context.Context, bookmarkId BookmarkId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteBookmarksBookmarkIdTagsResponse, error)

	DeleteBookmarksBookmarkIdTagsWithResponse(ctx context.Context, bookmarkId BookmarkId, body DeleteBookmarksBookmarkIdTagsJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteBookmarksBookmarkIdTagsResponse, error)

	// PostBookmarksBookmarkIdTagsWithBodyWithResponse request with any body
	PostBookmarksBookmarkIdTagsWithBodyWithResponse(ctx context.Context, bookmarkId BookmarkId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBookmarksBookmarkIdTagsResponse, error)

	PostBookmarksBookmarkIdTagsWithResponse(ctx context.Context, bookmarkId BookmarkId, body PostBookmarksBookmarkIdTagsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBookmarksBookmarkIdTagsResponse, error)

	// GetHighlightsWithResponse request
	GetHighlightsWithResponse(ctx context.Context, params *GetHighlightsParams, reqEditors ...RequestEditorFn) (*GetHighlightsResponse, error)

	// PostHighlightsWithBodyWithResponse request with any body
	PostHighlightsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostHighlightsResponse, error)

	PostHighlightsWithResponse(ctx context.Context, body PostHighlightsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostHighlightsResponse, error)

	// DeleteHighlightsHighlightIdWithResponse request
	DeleteHighlightsHighlightIdWithResponse(ctx context.Context, highlightId HighlightId, reqEditors ...RequestEditorFn) (*DeleteHighlightsHighlightIdResponse, error)

	// GetHighlightsHighlightIdWithResponse request
	GetHighlightsHighlightIdWithResponse(ctx context.Context, highlightId HighlightId, reqEditors ...RequestEditorFn) (*GetHighlightsHighlightIdResponse, error)

	// PatchHighlightsHighlightIdWithBodyWithResponse request with any body
	PatchHighlightsHighlightIdWithBodyWithResponse(ctx context.Context, highlightId HighlightId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchHighlightsHighlightIdResponse, error)

	PatchHighlightsHighlightIdWithResponse(ctx context.Context, highlightId HighlightId, body PatchHighlightsHighlightIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchHighlightsHighlightIdResponse, error)

	// GetListsWithResponse request
	GetListsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetListsResponse, error)

	// PostListsWithBodyWithResponse request with any body
	PostListsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostListsResponse, error)

	PostListsWithResponse(ctx context.Context, body PostListsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostListsResponse, error)

	// DeleteListsListIdWithResponse request
	DeleteListsListIdWithResponse(ctx context.Context, listId ListId, reqEditors ...RequestEditorFn) (*DeleteListsListIdResponse, error)

	// GetListsListIdWithResponse request
	GetListsListIdWithResponse(ctx context.Context, listId ListId, reqEditors ...RequestEditorFn) (*GetListsListIdResponse, error)

	// PatchListsListIdWithBodyWithResponse request with any body
	PatchListsListIdWithBodyWithResponse(ctx context.Context, listId ListId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchListsListIdResponse, error)

	PatchListsListIdWithResponse(ctx context.Context, listId ListId, body PatchListsListIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchListsListIdResponse, error)

	// GetListsListIdBookmarksWithResponse request
	GetListsListIdBookmarksWithResponse(ctx context.Context, listId ListId, params *GetListsListIdBookmarksParams, reqEditors ...RequestEditorFn) (*GetListsListIdBookmarksResponse, error)

	// DeleteListsListIdBookmarksBookmarkIdWithResponse request
	DeleteListsListIdBookmarksBookmarkIdWithResponse(ctx context.Context, listId ListId, bookmarkId BookmarkId, reqEditors ...RequestEditorFn) (*DeleteListsListIdBookmarksBookmarkIdResponse, error)

	// PutListsListIdBookmarksBookmarkIdWithResponse request
	PutListsListIdBookmarksBookmarkIdWithResponse(ctx context.Context, listId ListId, bookmarkId BookmarkId, reqEditors ...RequestEditorFn) (*PutListsListIdBookmarksBookmarkIdResponse, error)

	// GetTagsWithResponse request
	GetTagsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetTagsResponse, error)

	// PostTagsWithBodyWithResponse request with any body
	PostTagsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTagsResponse, error)

	PostTagsWithResponse(ctx context.Context, body PostTagsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTagsResponse, error)

	// DeleteTagsTagIdWithResponse request
	DeleteTagsTagIdWithResponse(ctx context.Context, tagId TagId, reqEditors ...RequestEditorFn) (*DeleteTagsTagIdResponse, error)

	// GetTagsTagIdWithResponse request
	GetTagsTagIdWithResponse(ctx context.Context, tagId TagId, reqEditors ...RequestEditorFn) (*GetTagsTagIdResponse, error)

	// PatchTagsTagIdWithBodyWithResponse request with any body
	PatchTagsTagIdWithBodyWithResponse(ctx context.Context, tagId TagId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchTagsTagIdResponse, error)

	PatchTagsTagIdWithResponse(ctx context.Context, tagId TagId, body PatchTagsTagIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchTagsTagIdResponse, error)

	// GetTagsTagIdBookmarksWithResponse request
	GetTagsTagIdBookmarksWithResponse(ctx context.Context, tagId TagId, params *GetTagsTagIdBookmarksParams, reqEditors ...RequestEditorFn) (*GetTagsTagIdBookmarksResponse, error)

	// GetUsersMeWithResponse request
	GetUsersMeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUsersMeResponse, error)

	// GetUsersMeStatsWithResponse request
	GetUsersMeStatsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUsersMeStatsResponse, error)
}

type PutAdminUsersUserIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Success bool `json:"success"`
	}
	JSON400 *struct {
		Error string `json:"error"`
	}
	JSON401 *struct {
		Error string `json:"error"`
	}
	JSON403 *struct {
		Error string `json:"error"`
	}
	JSON404 *struct {
		Error string `json:"error"`
	}
}

// Status returns HTTPResponse.Status
func (r PutAdminUsersUserIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAdminUsersUserIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAssetsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Asset
}

// Status returns HTTPResponse.Status
func (r PostAssetsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAssetsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAssetsAssetIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetAssetsAssetIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAssetsAssetIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetBookmarksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedBookmarks
}

// Status returns HTTPResponse.Status
func (r GetBookmarksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBookmarksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostBookmarksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Bookmark
	JSON400      *struct {
		Code    string `json:"code"`
		Message string `json:"message"`
	}
}

// Status returns HTTPResponse.Status
func (r PostBookmarksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostBookmarksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetBookmarksSearchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedBookmarks
}

// Status returns HTTPResponse.Status
func (r GetBookmarksSearchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBookmarksSearchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteBookmarksBookmarkIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *struct {
		Code    string `json:"code"`
		Message string `json:"message"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteBookmarksBookmarkIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteBookmarksBookmarkIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetBookmarksBookmarkIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Bookmark
	JSON404      *struct {
		Code    string `json:"code"`
		Message string `json:"message"`
	}
}

// Status returns HTTPResponse.Status
func (r GetBookmarksBookmarkIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBookmarksBookmarkIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchBookmarksBookmarkIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Archived            bool                                            `json:"archived"`
		CreatedAt           string                                          `json:"createdAt"`
		Favourited          bool                                            `json:"favourited"`
		Id                  string                                          `json:"id"`
		ModifiedAt          *string                                         `json:"modifiedAt"`
		Note                *string                                         `json:"note"`
		SummarizationStatus *PatchBookmarksBookmarkId200SummarizationStatus `json:"summarizationStatus"`
		Summary             *string                                         `json:"summary"`
		TaggingStatus       *PatchBookmarksBookmarkId200TaggingStatus       `json:"taggingStatus"`
		Title               *string                                         `json:"title"`
	}
	JSON404 *struct {
		Code    string `json:"code"`
		Message string `json:"message"`
	}
}
type PatchBookmarksBookmarkId200SummarizationStatus string
type PatchBookmarksBookmarkId200TaggingStatus string

// Status returns HTTPResponse.Status
func (r PatchBookmarksBookmarkIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchBookmarksBookmarkIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostBookmarksBookmarkIdAssetsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		AssetType PostBookmarksBookmarkIdAssets201AssetType `json:"assetType"`
		Id        string                                    `json:"id"`
	}
	JSON404 *struct {
		Code    string `json:"code"`
		Message string `json:"message"`
	}
}
type PostBookmarksBookmarkIdAssets201AssetType string

// Status returns HTTPResponse.Status
func (r PostBookmarksBookmarkIdAssetsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostBookmarksBookmarkIdAssetsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteBookmarksBookmarkIdAssetsAssetIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *struct {
		Code    string `json:"code"`
		Message string `json:"message"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteBookmarksBookmarkIdAssetsAssetIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteBookmarksBookmarkIdAssetsAssetIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutBookmarksBookmarkIdAssetsAssetIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *struct {
		Code    string `json:"code"`
		Message string `json:"message"`
	}
}

// Status returns HTTPResponse.Status
func (r PutBookmarksBookmarkIdAssetsAssetIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutBookmarksBookmarkIdAssetsAssetIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetBookmarksBookmarkIdHighlightsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Highlights []Highlight `json:"highlights"`
	}
	JSON404 *struct {
		Code    string `json:"code"`
		Message string `json:"message"`
	}
}

// Status returns HTTPResponse.Status
func (r GetBookmarksBookmarkIdHighlightsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBookmarksBookmarkIdHighlightsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostBookmarksBookmarkIdSummarizeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Archived            bool                                                    `json:"archived"`
		CreatedAt           string                                                  `json:"createdAt"`
		Favourited          bool                                                    `json:"favourited"`
		Id                  string                                                  `json:"id"`
		ModifiedAt          *string                                                 `json:"modifiedAt"`
		Note                *string                                                 `json:"note"`
		SummarizationStatus *PostBookmarksBookmarkIdSummarize200SummarizationStatus `json:"summarizationStatus"`
		Summary             *string                                                 `json:"summary"`
		TaggingStatus       *PostBookmarksBookmarkIdSummarize200TaggingStatus       `json:"taggingStatus"`
		Title               *string                                                 `json:"title"`
	}
	JSON404 *struct {
		Code    string `json:"code"`
		Message string `json:"message"`
	}
}
type PostBookmarksBookmarkIdSummarize200SummarizationStatus string
type PostBookmarksBookmarkIdSummarize200TaggingStatus string

// Status returns HTTPResponse.Status
func (r PostBookmarksBookmarkIdSummarizeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostBookmarksBookmarkIdSummarizeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteBookmarksBookmarkIdTagsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Detached []TagId `json:"detached"`
	}
	JSON404 *struct {
		Code    string `json:"code"`
		Message string `json:"message"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteBookmarksBookmarkIdTagsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteBookmarksBookmarkIdTagsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostBookmarksBookmarkIdTagsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Attached []TagId `json:"attached"`
	}
	JSON404 *struct {
		Code    string `json:"code"`
		Message string `json:"message"`
	}
}

// Status returns HTTPResponse.Status
func (r PostBookmarksBookmarkIdTagsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostBookmarksBookmarkIdTagsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetHighlightsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedHighlights
}

// Status returns HTTPResponse.Status
func (r GetHighlightsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHighlightsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostHighlightsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Highlight
	JSON400      *struct {
		Code    string `json:"code"`
		Message string `json:"message"`
	}
	JSON404 *struct {
		Code    string `json:"code"`
		Message string `json:"message"`
	}
}

// Status returns HTTPResponse.Status
func (r PostHighlightsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostHighlightsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteHighlightsHighlightIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Highlight
	JSON404      *struct {
		Code    string `json:"code"`
		Message string `json:"message"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteHighlightsHighlightIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteHighlightsHighlightIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetHighlightsHighlightIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Highlight
	JSON404      *struct {
		Code    string `json:"code"`
		Message string `json:"message"`
	}
}

// Status returns HTTPResponse.Status
func (r GetHighlightsHighlightIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHighlightsHighlightIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchHighlightsHighlightIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Highlight
	JSON404      *struct {
		Code    string `json:"code"`
		Message string `json:"message"`
	}
}

// Status returns HTTPResponse.Status
func (r PatchHighlightsHighlightIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchHighlightsHighlightIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetListsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Lists []List `json:"lists"`
	}
}

// Status returns HTTPResponse.Status
func (r GetListsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetListsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostListsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *List
	JSON400      *struct {
		Code    string `json:"code"`
		Message string `json:"message"`
	}
}

// Status returns HTTPResponse.Status
func (r PostListsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostListsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteListsListIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *struct {
		Code    string `json:"code"`
		Message string `json:"message"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteListsListIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteListsListIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetListsListIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *List
	JSON404      *struct {
		Code    string `json:"code"`
		Message string `json:"message"`
	}
}

// Status returns HTTPResponse.Status
func (r GetListsListIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetListsListIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchListsListIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *List
	JSON404      *struct {
		Code    string `json:"code"`
		Message string `json:"message"`
	}
}

// Status returns HTTPResponse.Status
func (r PatchListsListIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchListsListIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetListsListIdBookmarksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedBookmarks
	JSON404      *struct {
		Code    string `json:"code"`
		Message string `json:"message"`
	}
}

// Status returns HTTPResponse.Status
func (r GetListsListIdBookmarksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetListsListIdBookmarksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteListsListIdBookmarksBookmarkIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *struct {
		Code    string `json:"code"`
		Message string `json:"message"`
	}
	JSON404 *struct {
		Code    string `json:"code"`
		Message string `json:"message"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteListsListIdBookmarksBookmarkIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteListsListIdBookmarksBookmarkIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutListsListIdBookmarksBookmarkIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *struct {
		Code    string `json:"code"`
		Message string `json:"message"`
	}
}

// Status returns HTTPResponse.Status
func (r PutListsListIdBookmarksBookmarkIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutListsListIdBookmarksBookmarkIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTagsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Tags []Tag `json:"tags"`
	}
}

// Status returns HTTPResponse.Status
func (r GetTagsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTagsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostTagsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	}
}

// Status returns HTTPResponse.Status
func (r PostTagsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostTagsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteTagsTagIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *struct {
		Code    string `json:"code"`
		Message string `json:"message"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteTagsTagIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteTagsTagIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTagsTagIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Tag
	JSON404      *struct {
		Code    string `json:"code"`
		Message string `json:"message"`
	}
}

// Status returns HTTPResponse.Status
func (r GetTagsTagIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTagsTagIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchTagsTagIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	}
	JSON404 *struct {
		Code    string `json:"code"`
		Message string `json:"message"`
	}
}

// Status returns HTTPResponse.Status
func (r PatchTagsTagIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchTagsTagIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTagsTagIdBookmarksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedBookmarks
	JSON404      *struct {
		Code    string `json:"code"`
		Message string `json:"message"`
	}
}

// Status returns HTTPResponse.Status
func (r GetTagsTagIdBookmarksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTagsTagIdBookmarksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUsersMeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Email     *string `json:"email"`
		Id        string  `json:"id"`
		LocalUser bool    `json:"localUser"`
		Name      *string `json:"name"`
	}
}

// Status returns HTTPResponse.Status
func (r GetUsersMeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUsersMeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUsersMeStatsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AssetsByType []struct {
			Count     float32 `json:"count"`
			TotalSize float32 `json:"totalSize"`
			Type      string  `json:"type"`
		} `json:"assetsByType"`
		BookmarkingActivity struct {
			ByDayOfWeek []struct {
				Count float32 `json:"count"`
				Day   float32 `json:"day"`
			} `json:"byDayOfWeek"`
			ByHour []struct {
				Count float32 `json:"count"`
				Hour  float32 `json:"hour"`
			} `json:"byHour"`
			ThisMonth float32 `json:"thisMonth"`
			ThisWeek  float32 `json:"thisWeek"`
			ThisYear  float32 `json:"thisYear"`
		} `json:"bookmarkingActivity"`
		BookmarksByType struct {
			Asset float32 `json:"asset"`
			Link  float32 `json:"link"`
			Text  float32 `json:"text"`
		} `json:"bookmarksByType"`
		NumArchived   float32 `json:"numArchived"`
		NumBookmarks  float32 `json:"numBookmarks"`
		NumFavorites  float32 `json:"numFavorites"`
		NumHighlights float32 `json:"numHighlights"`
		NumLists      float32 `json:"numLists"`
		NumTags       float32 `json:"numTags"`
		TagUsage      []struct {
			Count float32 `json:"count"`
			Name  string  `json:"name"`
		} `json:"tagUsage"`
		TopDomains []struct {
			Count  float32 `json:"count"`
			Domain string  `json:"domain"`
		} `json:"topDomains"`
		TotalAssetSize float32 `json:"totalAssetSize"`
	}
}

// Status returns HTTPResponse.Status
func (r GetUsersMeStatsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUsersMeStatsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// PutAdminUsersUserIdWithBodyWithResponse request with arbitrary body returning *PutAdminUsersUserIdResponse
func (c *ClientWithResponses) PutAdminUsersUserIdWithBodyWithResponse(ctx context.Context, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAdminUsersUserIdResponse, error) {
	rsp, err := c.PutAdminUsersUserIdWithBody(ctx, userId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAdminUsersUserIdResponse(rsp)
}

func (c *ClientWithResponses) PutAdminUsersUserIdWithResponse(ctx context.Context, userId string, body PutAdminUsersUserIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAdminUsersUserIdResponse, error) {
	rsp, err := c.PutAdminUsersUserId(ctx, userId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAdminUsersUserIdResponse(rsp)
}

// PostAssetsWithBodyWithResponse request with arbitrary body returning *PostAssetsResponse
func (c *ClientWithResponses) PostAssetsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAssetsResponse, error) {
	rsp, err := c.PostAssetsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAssetsResponse(rsp)
}

// GetAssetsAssetIdWithResponse request returning *GetAssetsAssetIdResponse
func (c *ClientWithResponses) GetAssetsAssetIdWithResponse(ctx context.Context, assetId AssetId, reqEditors ...RequestEditorFn) (*GetAssetsAssetIdResponse, error) {
	rsp, err := c.GetAssetsAssetId(ctx, assetId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAssetsAssetIdResponse(rsp)
}

// GetBookmarksWithResponse request returning *GetBookmarksResponse
func (c *ClientWithResponses) GetBookmarksWithResponse(ctx context.Context, params *GetBookmarksParams, reqEditors ...RequestEditorFn) (*GetBookmarksResponse, error) {
	rsp, err := c.GetBookmarks(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetBookmarksResponse(rsp)
}

// PostBookmarksWithBodyWithResponse request with arbitrary body returning *PostBookmarksResponse
func (c *ClientWithResponses) PostBookmarksWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBookmarksResponse, error) {
	rsp, err := c.PostBookmarksWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBookmarksResponse(rsp)
}

func (c *ClientWithResponses) PostBookmarksWithResponse(ctx context.Context, body PostBookmarksJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBookmarksResponse, error) {
	rsp, err := c.PostBookmarks(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBookmarksResponse(rsp)
}

// GetBookmarksSearchWithResponse request returning *GetBookmarksSearchResponse
func (c *ClientWithResponses) GetBookmarksSearchWithResponse(ctx context.Context, params *GetBookmarksSearchParams, reqEditors ...RequestEditorFn) (*GetBookmarksSearchResponse, error) {
	rsp, err := c.GetBookmarksSearch(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetBookmarksSearchResponse(rsp)
}

// DeleteBookmarksBookmarkIdWithResponse request returning *DeleteBookmarksBookmarkIdResponse
func (c *ClientWithResponses) DeleteBookmarksBookmarkIdWithResponse(ctx context.Context, bookmarkId BookmarkId, reqEditors ...RequestEditorFn) (*DeleteBookmarksBookmarkIdResponse, error) {
	rsp, err := c.DeleteBookmarksBookmarkId(ctx, bookmarkId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteBookmarksBookmarkIdResponse(rsp)
}

// GetBookmarksBookmarkIdWithResponse request returning *GetBookmarksBookmarkIdResponse
func (c *ClientWithResponses) GetBookmarksBookmarkIdWithResponse(ctx context.Context, bookmarkId BookmarkId, params *GetBookmarksBookmarkIdParams, reqEditors ...RequestEditorFn) (*GetBookmarksBookmarkIdResponse, error) {
	rsp, err := c.GetBookmarksBookmarkId(ctx, bookmarkId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetBookmarksBookmarkIdResponse(rsp)
}

// PatchBookmarksBookmarkIdWithBodyWithResponse request with arbitrary body returning *PatchBookmarksBookmarkIdResponse
func (c *ClientWithResponses) PatchBookmarksBookmarkIdWithBodyWithResponse(ctx context.Context, bookmarkId BookmarkId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchBookmarksBookmarkIdResponse, error) {
	rsp, err := c.PatchBookmarksBookmarkIdWithBody(ctx, bookmarkId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchBookmarksBookmarkIdResponse(rsp)
}

func (c *ClientWithResponses) PatchBookmarksBookmarkIdWithResponse(ctx context.Context, bookmarkId BookmarkId, body PatchBookmarksBookmarkIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchBookmarksBookmarkIdResponse, error) {
	rsp, err := c.PatchBookmarksBookmarkId(ctx, bookmarkId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchBookmarksBookmarkIdResponse(rsp)
}

// PostBookmarksBookmarkIdAssetsWithBodyWithResponse request with arbitrary body returning *PostBookmarksBookmarkIdAssetsResponse
func (c *ClientWithResponses) PostBookmarksBookmarkIdAssetsWithBodyWithResponse(ctx context.Context, bookmarkId BookmarkId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBookmarksBookmarkIdAssetsResponse, error) {
	rsp, err := c.PostBookmarksBookmarkIdAssetsWithBody(ctx, bookmarkId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBookmarksBookmarkIdAssetsResponse(rsp)
}

func (c *ClientWithResponses) PostBookmarksBookmarkIdAssetsWithResponse(ctx context.Context, bookmarkId BookmarkId, body PostBookmarksBookmarkIdAssetsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBookmarksBookmarkIdAssetsResponse, error) {
	rsp, err := c.PostBookmarksBookmarkIdAssets(ctx, bookmarkId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBookmarksBookmarkIdAssetsResponse(rsp)
}

// DeleteBookmarksBookmarkIdAssetsAssetIdWithResponse request returning *DeleteBookmarksBookmarkIdAssetsAssetIdResponse
func (c *ClientWithResponses) DeleteBookmarksBookmarkIdAssetsAssetIdWithResponse(ctx context.Context, bookmarkId BookmarkId, assetId AssetId, reqEditors ...RequestEditorFn) (*DeleteBookmarksBookmarkIdAssetsAssetIdResponse, error) {
	rsp, err := c.DeleteBookmarksBookmarkIdAssetsAssetId(ctx, bookmarkId, assetId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteBookmarksBookmarkIdAssetsAssetIdResponse(rsp)
}

// PutBookmarksBookmarkIdAssetsAssetIdWithBodyWithResponse request with arbitrary body returning *PutBookmarksBookmarkIdAssetsAssetIdResponse
func (c *ClientWithResponses) PutBookmarksBookmarkIdAssetsAssetIdWithBodyWithResponse(ctx context.Context, bookmarkId BookmarkId, assetId AssetId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutBookmarksBookmarkIdAssetsAssetIdResponse, error) {
	rsp, err := c.PutBookmarksBookmarkIdAssetsAssetIdWithBody(ctx, bookmarkId, assetId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutBookmarksBookmarkIdAssetsAssetIdResponse(rsp)
}

func (c *ClientWithResponses) PutBookmarksBookmarkIdAssetsAssetIdWithResponse(ctx context.Context, bookmarkId BookmarkId, assetId AssetId, body PutBookmarksBookmarkIdAssetsAssetIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutBookmarksBookmarkIdAssetsAssetIdResponse, error) {
	rsp, err := c.PutBookmarksBookmarkIdAssetsAssetId(ctx, bookmarkId, assetId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutBookmarksBookmarkIdAssetsAssetIdResponse(rsp)
}

// GetBookmarksBookmarkIdHighlightsWithResponse request returning *GetBookmarksBookmarkIdHighlightsResponse
func (c *ClientWithResponses) GetBookmarksBookmarkIdHighlightsWithResponse(ctx context.Context, bookmarkId BookmarkId, reqEditors ...RequestEditorFn) (*GetBookmarksBookmarkIdHighlightsResponse, error) {
	rsp, err := c.GetBookmarksBookmarkIdHighlights(ctx, bookmarkId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetBookmarksBookmarkIdHighlightsResponse(rsp)
}

// PostBookmarksBookmarkIdSummarizeWithResponse request returning *PostBookmarksBookmarkIdSummarizeResponse
func (c *ClientWithResponses) PostBookmarksBookmarkIdSummarizeWithResponse(ctx context.Context, bookmarkId BookmarkId, reqEditors ...RequestEditorFn) (*PostBookmarksBookmarkIdSummarizeResponse, error) {
	rsp, err := c.PostBookmarksBookmarkIdSummarize(ctx, bookmarkId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBookmarksBookmarkIdSummarizeResponse(rsp)
}

// DeleteBookmarksBookmarkIdTagsWithBodyWithResponse request with arbitrary body returning *DeleteBookmarksBookmarkIdTagsResponse
func (c *ClientWithResponses) DeleteBookmarksBookmarkIdTagsWithBodyWithResponse(ctx context.Context, bookmarkId BookmarkId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteBookmarksBookmarkIdTagsResponse, error) {
	rsp, err := c.DeleteBookmarksBookmarkIdTagsWithBody(ctx, bookmarkId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteBookmarksBookmarkIdTagsResponse(rsp)
}

func (c *ClientWithResponses) DeleteBookmarksBookmarkIdTagsWithResponse(ctx context.Context, bookmarkId BookmarkId, body DeleteBookmarksBookmarkIdTagsJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteBookmarksBookmarkIdTagsResponse, error) {
	rsp, err := c.DeleteBookmarksBookmarkIdTags(ctx, bookmarkId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteBookmarksBookmarkIdTagsResponse(rsp)
}

// PostBookmarksBookmarkIdTagsWithBodyWithResponse request with arbitrary body returning *PostBookmarksBookmarkIdTagsResponse
func (c *ClientWithResponses) PostBookmarksBookmarkIdTagsWithBodyWithResponse(ctx context.Context, bookmarkId BookmarkId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBookmarksBookmarkIdTagsResponse, error) {
	rsp, err := c.PostBookmarksBookmarkIdTagsWithBody(ctx, bookmarkId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBookmarksBookmarkIdTagsResponse(rsp)
}

func (c *ClientWithResponses) PostBookmarksBookmarkIdTagsWithResponse(ctx context.Context, bookmarkId BookmarkId, body PostBookmarksBookmarkIdTagsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBookmarksBookmarkIdTagsResponse, error) {
	rsp, err := c.PostBookmarksBookmarkIdTags(ctx, bookmarkId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBookmarksBookmarkIdTagsResponse(rsp)
}

// GetHighlightsWithResponse request returning *GetHighlightsResponse
func (c *ClientWithResponses) GetHighlightsWithResponse(ctx context.Context, params *GetHighlightsParams, reqEditors ...RequestEditorFn) (*GetHighlightsResponse, error) {
	rsp, err := c.GetHighlights(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHighlightsResponse(rsp)
}

// PostHighlightsWithBodyWithResponse request with arbitrary body returning *PostHighlightsResponse
func (c *ClientWithResponses) PostHighlightsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostHighlightsResponse, error) {
	rsp, err := c.PostHighlightsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostHighlightsResponse(rsp)
}

func (c *ClientWithResponses) PostHighlightsWithResponse(ctx context.Context, body PostHighlightsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostHighlightsResponse, error) {
	rsp, err := c.PostHighlights(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostHighlightsResponse(rsp)
}

// DeleteHighlightsHighlightIdWithResponse request returning *DeleteHighlightsHighlightIdResponse
func (c *ClientWithResponses) DeleteHighlightsHighlightIdWithResponse(ctx context.Context, highlightId HighlightId, reqEditors ...RequestEditorFn) (*DeleteHighlightsHighlightIdResponse, error) {
	rsp, err := c.DeleteHighlightsHighlightId(ctx, highlightId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteHighlightsHighlightIdResponse(rsp)
}

// GetHighlightsHighlightIdWithResponse request returning *GetHighlightsHighlightIdResponse
func (c *ClientWithResponses) GetHighlightsHighlightIdWithResponse(ctx context.Context, highlightId HighlightId, reqEditors ...RequestEditorFn) (*GetHighlightsHighlightIdResponse, error) {
	rsp, err := c.GetHighlightsHighlightId(ctx, highlightId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHighlightsHighlightIdResponse(rsp)
}

// PatchHighlightsHighlightIdWithBodyWithResponse request with arbitrary body returning *PatchHighlightsHighlightIdResponse
func (c *ClientWithResponses) PatchHighlightsHighlightIdWithBodyWithResponse(ctx context.Context, highlightId HighlightId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchHighlightsHighlightIdResponse, error) {
	rsp, err := c.PatchHighlightsHighlightIdWithBody(ctx, highlightId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchHighlightsHighlightIdResponse(rsp)
}

func (c *ClientWithResponses) PatchHighlightsHighlightIdWithResponse(ctx context.Context, highlightId HighlightId, body PatchHighlightsHighlightIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchHighlightsHighlightIdResponse, error) {
	rsp, err := c.PatchHighlightsHighlightId(ctx, highlightId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchHighlightsHighlightIdResponse(rsp)
}

// GetListsWithResponse request returning *GetListsResponse
func (c *ClientWithResponses) GetListsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetListsResponse, error) {
	rsp, err := c.GetLists(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetListsResponse(rsp)
}

// PostListsWithBodyWithResponse request with arbitrary body returning *PostListsResponse
func (c *ClientWithResponses) PostListsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostListsResponse, error) {
	rsp, err := c.PostListsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostListsResponse(rsp)
}

func (c *ClientWithResponses) PostListsWithResponse(ctx context.Context, body PostListsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostListsResponse, error) {
	rsp, err := c.PostLists(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostListsResponse(rsp)
}

// DeleteListsListIdWithResponse request returning *DeleteListsListIdResponse
func (c *ClientWithResponses) DeleteListsListIdWithResponse(ctx context.Context, listId ListId, reqEditors ...RequestEditorFn) (*DeleteListsListIdResponse, error) {
	rsp, err := c.DeleteListsListId(ctx, listId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteListsListIdResponse(rsp)
}

// GetListsListIdWithResponse request returning *GetListsListIdResponse
func (c *ClientWithResponses) GetListsListIdWithResponse(ctx context.Context, listId ListId, reqEditors ...RequestEditorFn) (*GetListsListIdResponse, error) {
	rsp, err := c.GetListsListId(ctx, listId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetListsListIdResponse(rsp)
}

// PatchListsListIdWithBodyWithResponse request with arbitrary body returning *PatchListsListIdResponse
func (c *ClientWithResponses) PatchListsListIdWithBodyWithResponse(ctx context.Context, listId ListId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchListsListIdResponse, error) {
	rsp, err := c.PatchListsListIdWithBody(ctx, listId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchListsListIdResponse(rsp)
}

func (c *ClientWithResponses) PatchListsListIdWithResponse(ctx context.Context, listId ListId, body PatchListsListIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchListsListIdResponse, error) {
	rsp, err := c.PatchListsListId(ctx, listId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchListsListIdResponse(rsp)
}

// GetListsListIdBookmarksWithResponse request returning *GetListsListIdBookmarksResponse
func (c *ClientWithResponses) GetListsListIdBookmarksWithResponse(ctx context.Context, listId ListId, params *GetListsListIdBookmarksParams, reqEditors ...RequestEditorFn) (*GetListsListIdBookmarksResponse, error) {
	rsp, err := c.GetListsListIdBookmarks(ctx, listId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetListsListIdBookmarksResponse(rsp)
}

// DeleteListsListIdBookmarksBookmarkIdWithResponse request returning *DeleteListsListIdBookmarksBookmarkIdResponse
func (c *ClientWithResponses) DeleteListsListIdBookmarksBookmarkIdWithResponse(ctx context.Context, listId ListId, bookmarkId BookmarkId, reqEditors ...RequestEditorFn) (*DeleteListsListIdBookmarksBookmarkIdResponse, error) {
	rsp, err := c.DeleteListsListIdBookmarksBookmarkId(ctx, listId, bookmarkId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteListsListIdBookmarksBookmarkIdResponse(rsp)
}

// PutListsListIdBookmarksBookmarkIdWithResponse request returning *PutListsListIdBookmarksBookmarkIdResponse
func (c *ClientWithResponses) PutListsListIdBookmarksBookmarkIdWithResponse(ctx context.Context, listId ListId, bookmarkId BookmarkId, reqEditors ...RequestEditorFn) (*PutListsListIdBookmarksBookmarkIdResponse, error) {
	rsp, err := c.PutListsListIdBookmarksBookmarkId(ctx, listId, bookmarkId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutListsListIdBookmarksBookmarkIdResponse(rsp)
}

// GetTagsWithResponse request returning *GetTagsResponse
func (c *ClientWithResponses) GetTagsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetTagsResponse, error) {
	rsp, err := c.GetTags(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTagsResponse(rsp)
}

// PostTagsWithBodyWithResponse request with arbitrary body returning *PostTagsResponse
func (c *ClientWithResponses) PostTagsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTagsResponse, error) {
	rsp, err := c.PostTagsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTagsResponse(rsp)
}

func (c *ClientWithResponses) PostTagsWithResponse(ctx context.Context, body PostTagsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTagsResponse, error) {
	rsp, err := c.PostTags(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTagsResponse(rsp)
}

// DeleteTagsTagIdWithResponse request returning *DeleteTagsTagIdResponse
func (c *ClientWithResponses) DeleteTagsTagIdWithResponse(ctx context.Context, tagId TagId, reqEditors ...RequestEditorFn) (*DeleteTagsTagIdResponse, error) {
	rsp, err := c.DeleteTagsTagId(ctx, tagId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteTagsTagIdResponse(rsp)
}

// GetTagsTagIdWithResponse request returning *GetTagsTagIdResponse
func (c *ClientWithResponses) GetTagsTagIdWithResponse(ctx context.Context, tagId TagId, reqEditors ...RequestEditorFn) (*GetTagsTagIdResponse, error) {
	rsp, err := c.GetTagsTagId(ctx, tagId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTagsTagIdResponse(rsp)
}

// PatchTagsTagIdWithBodyWithResponse request with arbitrary body returning *PatchTagsTagIdResponse
func (c *ClientWithResponses) PatchTagsTagIdWithBodyWithResponse(ctx context.Context, tagId TagId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchTagsTagIdResponse, error) {
	rsp, err := c.PatchTagsTagIdWithBody(ctx, tagId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchTagsTagIdResponse(rsp)
}

func (c *ClientWithResponses) PatchTagsTagIdWithResponse(ctx context.Context, tagId TagId, body PatchTagsTagIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchTagsTagIdResponse, error) {
	rsp, err := c.PatchTagsTagId(ctx, tagId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchTagsTagIdResponse(rsp)
}

// GetTagsTagIdBookmarksWithResponse request returning *GetTagsTagIdBookmarksResponse
func (c *ClientWithResponses) GetTagsTagIdBookmarksWithResponse(ctx context.Context, tagId TagId, params *GetTagsTagIdBookmarksParams, reqEditors ...RequestEditorFn) (*GetTagsTagIdBookmarksResponse, error) {
	rsp, err := c.GetTagsTagIdBookmarks(ctx, tagId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTagsTagIdBookmarksResponse(rsp)
}

// GetUsersMeWithResponse request returning *GetUsersMeResponse
func (c *ClientWithResponses) GetUsersMeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUsersMeResponse, error) {
	rsp, err := c.GetUsersMe(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUsersMeResponse(rsp)
}

// GetUsersMeStatsWithResponse request returning *GetUsersMeStatsResponse
func (c *ClientWithResponses) GetUsersMeStatsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUsersMeStatsResponse, error) {
	rsp, err := c.GetUsersMeStats(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUsersMeStatsResponse(rsp)
}

// ParsePutAdminUsersUserIdResponse parses an HTTP response from a PutAdminUsersUserIdWithResponse call
func ParsePutAdminUsersUserIdResponse(rsp *http.Response) (*PutAdminUsersUserIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAdminUsersUserIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Success bool `json:"success"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Error string `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Error string `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Error string `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Error string `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostAssetsResponse parses an HTTP response from a PostAssetsWithResponse call
func ParsePostAssetsResponse(rsp *http.Response) (*PostAssetsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAssetsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Asset
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAssetsAssetIdResponse parses an HTTP response from a GetAssetsAssetIdWithResponse call
func ParseGetAssetsAssetIdResponse(rsp *http.Response) (*GetAssetsAssetIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAssetsAssetIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetBookmarksResponse parses an HTTP response from a GetBookmarksWithResponse call
func ParseGetBookmarksResponse(rsp *http.Response) (*GetBookmarksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetBookmarksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedBookmarks
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostBookmarksResponse parses an HTTP response from a PostBookmarksWithResponse call
func ParsePostBookmarksResponse(rsp *http.Response) (*PostBookmarksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostBookmarksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Bookmark
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Code    string `json:"code"`
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetBookmarksSearchResponse parses an HTTP response from a GetBookmarksSearchWithResponse call
func ParseGetBookmarksSearchResponse(rsp *http.Response) (*GetBookmarksSearchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetBookmarksSearchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedBookmarks
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteBookmarksBookmarkIdResponse parses an HTTP response from a DeleteBookmarksBookmarkIdWithResponse call
func ParseDeleteBookmarksBookmarkIdResponse(rsp *http.Response) (*DeleteBookmarksBookmarkIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteBookmarksBookmarkIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Code    string `json:"code"`
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetBookmarksBookmarkIdResponse parses an HTTP response from a GetBookmarksBookmarkIdWithResponse call
func ParseGetBookmarksBookmarkIdResponse(rsp *http.Response) (*GetBookmarksBookmarkIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetBookmarksBookmarkIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Bookmark
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Code    string `json:"code"`
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePatchBookmarksBookmarkIdResponse parses an HTTP response from a PatchBookmarksBookmarkIdWithResponse call
func ParsePatchBookmarksBookmarkIdResponse(rsp *http.Response) (*PatchBookmarksBookmarkIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchBookmarksBookmarkIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Archived            bool                                            `json:"archived"`
			CreatedAt           string                                          `json:"createdAt"`
			Favourited          bool                                            `json:"favourited"`
			Id                  string                                          `json:"id"`
			ModifiedAt          *string                                         `json:"modifiedAt"`
			Note                *string                                         `json:"note"`
			SummarizationStatus *PatchBookmarksBookmarkId200SummarizationStatus `json:"summarizationStatus"`
			Summary             *string                                         `json:"summary"`
			TaggingStatus       *PatchBookmarksBookmarkId200TaggingStatus       `json:"taggingStatus"`
			Title               *string                                         `json:"title"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Code    string `json:"code"`
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostBookmarksBookmarkIdAssetsResponse parses an HTTP response from a PostBookmarksBookmarkIdAssetsWithResponse call
func ParsePostBookmarksBookmarkIdAssetsResponse(rsp *http.Response) (*PostBookmarksBookmarkIdAssetsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostBookmarksBookmarkIdAssetsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			AssetType PostBookmarksBookmarkIdAssets201AssetType `json:"assetType"`
			Id        string                                    `json:"id"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Code    string `json:"code"`
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseDeleteBookmarksBookmarkIdAssetsAssetIdResponse parses an HTTP response from a DeleteBookmarksBookmarkIdAssetsAssetIdWithResponse call
func ParseDeleteBookmarksBookmarkIdAssetsAssetIdResponse(rsp *http.Response) (*DeleteBookmarksBookmarkIdAssetsAssetIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteBookmarksBookmarkIdAssetsAssetIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Code    string `json:"code"`
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePutBookmarksBookmarkIdAssetsAssetIdResponse parses an HTTP response from a PutBookmarksBookmarkIdAssetsAssetIdWithResponse call
func ParsePutBookmarksBookmarkIdAssetsAssetIdResponse(rsp *http.Response) (*PutBookmarksBookmarkIdAssetsAssetIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutBookmarksBookmarkIdAssetsAssetIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Code    string `json:"code"`
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetBookmarksBookmarkIdHighlightsResponse parses an HTTP response from a GetBookmarksBookmarkIdHighlightsWithResponse call
func ParseGetBookmarksBookmarkIdHighlightsResponse(rsp *http.Response) (*GetBookmarksBookmarkIdHighlightsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetBookmarksBookmarkIdHighlightsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Highlights []Highlight `json:"highlights"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Code    string `json:"code"`
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostBookmarksBookmarkIdSummarizeResponse parses an HTTP response from a PostBookmarksBookmarkIdSummarizeWithResponse call
func ParsePostBookmarksBookmarkIdSummarizeResponse(rsp *http.Response) (*PostBookmarksBookmarkIdSummarizeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostBookmarksBookmarkIdSummarizeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Archived            bool                                                    `json:"archived"`
			CreatedAt           string                                                  `json:"createdAt"`
			Favourited          bool                                                    `json:"favourited"`
			Id                  string                                                  `json:"id"`
			ModifiedAt          *string                                                 `json:"modifiedAt"`
			Note                *string                                                 `json:"note"`
			SummarizationStatus *PostBookmarksBookmarkIdSummarize200SummarizationStatus `json:"summarizationStatus"`
			Summary             *string                                                 `json:"summary"`
			TaggingStatus       *PostBookmarksBookmarkIdSummarize200TaggingStatus       `json:"taggingStatus"`
			Title               *string                                                 `json:"title"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Code    string `json:"code"`
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseDeleteBookmarksBookmarkIdTagsResponse parses an HTTP response from a DeleteBookmarksBookmarkIdTagsWithResponse call
func ParseDeleteBookmarksBookmarkIdTagsResponse(rsp *http.Response) (*DeleteBookmarksBookmarkIdTagsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteBookmarksBookmarkIdTagsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Detached []TagId `json:"detached"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Code    string `json:"code"`
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostBookmarksBookmarkIdTagsResponse parses an HTTP response from a PostBookmarksBookmarkIdTagsWithResponse call
func ParsePostBookmarksBookmarkIdTagsResponse(rsp *http.Response) (*PostBookmarksBookmarkIdTagsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostBookmarksBookmarkIdTagsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Attached []TagId `json:"attached"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Code    string `json:"code"`
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetHighlightsResponse parses an HTTP response from a GetHighlightsWithResponse call
func ParseGetHighlightsResponse(rsp *http.Response) (*GetHighlightsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetHighlightsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedHighlights
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostHighlightsResponse parses an HTTP response from a PostHighlightsWithResponse call
func ParsePostHighlightsResponse(rsp *http.Response) (*PostHighlightsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostHighlightsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Highlight
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Code    string `json:"code"`
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Code    string `json:"code"`
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseDeleteHighlightsHighlightIdResponse parses an HTTP response from a DeleteHighlightsHighlightIdWithResponse call
func ParseDeleteHighlightsHighlightIdResponse(rsp *http.Response) (*DeleteHighlightsHighlightIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteHighlightsHighlightIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Highlight
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Code    string `json:"code"`
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetHighlightsHighlightIdResponse parses an HTTP response from a GetHighlightsHighlightIdWithResponse call
func ParseGetHighlightsHighlightIdResponse(rsp *http.Response) (*GetHighlightsHighlightIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetHighlightsHighlightIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Highlight
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Code    string `json:"code"`
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePatchHighlightsHighlightIdResponse parses an HTTP response from a PatchHighlightsHighlightIdWithResponse call
func ParsePatchHighlightsHighlightIdResponse(rsp *http.Response) (*PatchHighlightsHighlightIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchHighlightsHighlightIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Highlight
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Code    string `json:"code"`
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetListsResponse parses an HTTP response from a GetListsWithResponse call
func ParseGetListsResponse(rsp *http.Response) (*GetListsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetListsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Lists []List `json:"lists"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostListsResponse parses an HTTP response from a PostListsWithResponse call
func ParsePostListsResponse(rsp *http.Response) (*PostListsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostListsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest List
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Code    string `json:"code"`
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseDeleteListsListIdResponse parses an HTTP response from a DeleteListsListIdWithResponse call
func ParseDeleteListsListIdResponse(rsp *http.Response) (*DeleteListsListIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteListsListIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Code    string `json:"code"`
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetListsListIdResponse parses an HTTP response from a GetListsListIdWithResponse call
func ParseGetListsListIdResponse(rsp *http.Response) (*GetListsListIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetListsListIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest List
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Code    string `json:"code"`
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePatchListsListIdResponse parses an HTTP response from a PatchListsListIdWithResponse call
func ParsePatchListsListIdResponse(rsp *http.Response) (*PatchListsListIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchListsListIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest List
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Code    string `json:"code"`
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetListsListIdBookmarksResponse parses an HTTP response from a GetListsListIdBookmarksWithResponse call
func ParseGetListsListIdBookmarksResponse(rsp *http.Response) (*GetListsListIdBookmarksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetListsListIdBookmarksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedBookmarks
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Code    string `json:"code"`
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseDeleteListsListIdBookmarksBookmarkIdResponse parses an HTTP response from a DeleteListsListIdBookmarksBookmarkIdWithResponse call
func ParseDeleteListsListIdBookmarksBookmarkIdResponse(rsp *http.Response) (*DeleteListsListIdBookmarksBookmarkIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteListsListIdBookmarksBookmarkIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Code    string `json:"code"`
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Code    string `json:"code"`
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePutListsListIdBookmarksBookmarkIdResponse parses an HTTP response from a PutListsListIdBookmarksBookmarkIdWithResponse call
func ParsePutListsListIdBookmarksBookmarkIdResponse(rsp *http.Response) (*PutListsListIdBookmarksBookmarkIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutListsListIdBookmarksBookmarkIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Code    string `json:"code"`
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetTagsResponse parses an HTTP response from a GetTagsWithResponse call
func ParseGetTagsResponse(rsp *http.Response) (*GetTagsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTagsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Tags []Tag `json:"tags"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostTagsResponse parses an HTTP response from a PostTagsWithResponse call
func ParsePostTagsResponse(rsp *http.Response) (*PostTagsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostTagsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Id   string `json:"id"`
			Name string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteTagsTagIdResponse parses an HTTP response from a DeleteTagsTagIdWithResponse call
func ParseDeleteTagsTagIdResponse(rsp *http.Response) (*DeleteTagsTagIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteTagsTagIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Code    string `json:"code"`
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetTagsTagIdResponse parses an HTTP response from a GetTagsTagIdWithResponse call
func ParseGetTagsTagIdResponse(rsp *http.Response) (*GetTagsTagIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTagsTagIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Tag
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Code    string `json:"code"`
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePatchTagsTagIdResponse parses an HTTP response from a PatchTagsTagIdWithResponse call
func ParsePatchTagsTagIdResponse(rsp *http.Response) (*PatchTagsTagIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchTagsTagIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Id   string `json:"id"`
			Name string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Code    string `json:"code"`
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetTagsTagIdBookmarksResponse parses an HTTP response from a GetTagsTagIdBookmarksWithResponse call
func ParseGetTagsTagIdBookmarksResponse(rsp *http.Response) (*GetTagsTagIdBookmarksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTagsTagIdBookmarksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedBookmarks
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Code    string `json:"code"`
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetUsersMeResponse parses an HTTP response from a GetUsersMeWithResponse call
func ParseGetUsersMeResponse(rsp *http.Response) (*GetUsersMeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUsersMeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Email     *string `json:"email"`
			Id        string  `json:"id"`
			LocalUser bool    `json:"localUser"`
			Name      *string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetUsersMeStatsResponse parses an HTTP response from a GetUsersMeStatsWithResponse call
func ParseGetUsersMeStatsResponse(rsp *http.Response) (*GetUsersMeStatsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUsersMeStatsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AssetsByType []struct {
				Count     float32 `json:"count"`
				TotalSize float32 `json:"totalSize"`
				Type      string  `json:"type"`
			} `json:"assetsByType"`
			BookmarkingActivity struct {
				ByDayOfWeek []struct {
					Count float32 `json:"count"`
					Day   float32 `json:"day"`
				} `json:"byDayOfWeek"`
				ByHour []struct {
					Count float32 `json:"count"`
					Hour  float32 `json:"hour"`
				} `json:"byHour"`
				ThisMonth float32 `json:"thisMonth"`
				ThisWeek  float32 `json:"thisWeek"`
				ThisYear  float32 `json:"thisYear"`
			} `json:"bookmarkingActivity"`
			BookmarksByType struct {
				Asset float32 `json:"asset"`
				Link  float32 `json:"link"`
				Text  float32 `json:"text"`
			} `json:"bookmarksByType"`
			NumArchived   float32 `json:"numArchived"`
			NumBookmarks  float32 `json:"numBookmarks"`
			NumFavorites  float32 `json:"numFavorites"`
			NumHighlights float32 `json:"numHighlights"`
			NumLists      float32 `json:"numLists"`
			NumTags       float32 `json:"numTags"`
			TagUsage      []struct {
				Count float32 `json:"count"`
				Name  string  `json:"name"`
			} `json:"tagUsage"`
			TopDomains []struct {
				Count  float32 `json:"count"`
				Domain string  `json:"domain"`
			} `json:"topDomains"`
			TotalAssetSize float32 `json:"totalAssetSize"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
